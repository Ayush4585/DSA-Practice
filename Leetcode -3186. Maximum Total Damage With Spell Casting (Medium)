class Solution {
public:
    int n;                                
    unordered_map<long long,long long> freq;      
    vector<long long> dp;           

    long long solve(int i, const vector<long long>& nums) {
        if (i >= n) return 0;  
        if (dp[i] != -1) return dp[i];  

        long long notTake = solve(i + 1, nums);

        int j = lower_bound(begin(nums) + i + 1, end(nums), nums[i] + 3) - begin(nums);
        long long take = nums[i] * freq[nums[i]] + solve(j, nums);

        return dp[i] = max(notTake, take);
    }

    long long maximumTotalDamage(vector<int>& power) {
        for (int x : power) 
            freq[x]++;

        vector<long long> nums(freq.size());
       
        for (auto &p : freq)
            nums.push_back(p.first);

        sort(begin(nums), end(nums));
        n = nums.size();
        dp.assign(n, -1);

        return solve(0, nums);
    }
};
